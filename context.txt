# Integración de Favoritos Frontend-Backend

## API Endpoints

### GET /favorites
- Devuelve la lista de favoritos del usuario
- No requiere parámetros
- Respuesta: { status: "success", data: { favorites: Favorite[] } }
- Los favoritos incluyen: url, title, faviconUrl

### POST /favorites
- Añade un nuevo favorito
- Body: { url: string, title: string, faviconUrl: string }
- Respuesta: { status: "success", data: { message: "Favorite added" } }
- No permite duplicados (se comprueba por URL)

### DELETE /favorites/:url
- Elimina un favorito por su URL
- URL debe estar codificada (encodeURIComponent)
- Respuesta: { status: "success", data: { message: "Favorite removed" } }

## Estructura de Datos

interface Favorite {
  url: string;        // URL única del marcador
  title: string;      // Título para mostrar
  faviconUrl: string; // Ruta al favicon (/favicons/...)
}

## Características Importantes

1. Persistencia:
   - Los favoritos se mantienen en memoria en el backend
   - Se guardan automáticamente en favorites.json
   - Sobreviven a reinicios del servidor
   - No se pierden al recargar el frontend

2. Identificación:
   - Los favoritos se identifican por URL
   - La URL es case-sensitive
   - No puede haber URLs duplicadas

3. Favicons:
   - Se sirven desde /favicons/
   - Pueden ser .ico o .png
   - Los iconos por defecto son:
     - default-icon.png (para marcadores)
     - folder-icon.png (para carpetas)

4. Gestión de Errores:
   - Todas las respuestas tienen formato { status: "success|error", data|message }
   - Los errores HTTP usan códigos apropiados (400, 401, 500)

## Recomendaciones para Frontend Vue

1. Store Pinia:
   - Mantener estado: items[], loading, error
   - Acciones: fetchFavorites(), addFavorite(favorite), removeFavorite(url)
   - Getters para buscar favoritos por URL

2. Componentes:
   - Comprobar si una URL está en favoritos antes de mostrar botón añadir/quitar
   - Usar loading states durante operaciones
   - Manejar errores y mostrar feedback al usuario

3. Inicialización:
   - Cargar favoritos al iniciar la app
   - Mantener sincronización con el backend

4. URLs:
   - Codificar URLs en solicitudes DELETE
   - Mantener URLs originales para comparaciones

## Ejemplo de Uso del Store

Para el store de Pinia recomendamos esta estructura base:
